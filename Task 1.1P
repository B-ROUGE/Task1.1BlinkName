/* 
  Sketch generated by the Arduino IoT Cloud Thing "Untitled"
  https://create.arduino.cc/cloud/things/27764efa-fdac-41f0-bc36-1a809a660c61 

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  - No variables have been created, add cloud variables on the Thing Setup page
    to see them declared here

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

#include "thingProperties.h"

// digital pin 2 has a pushbutton attached to it. Give it a name:
int pushButton = 2;

// Turn on LED to simulate a morse code 'dash'
void dash() {
  digitalWrite(LED_BUILTIN, HIGH);
  delay(300);
  digitalWrite(LED_BUILTIN, LOW);
  delay(100);
}

// Turn on LED to simulate a morse code 'dot'
void dot() {
  digitalWrite(LED_BUILTIN, HIGH);
  delay(100);
  digitalWrite(LED_BUILTIN, LOW);
  delay(100);
}

void setup() {
  // Initialize serial and wait for port to open:
  Serial.begin(9600);
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(1500); 

  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);
  
  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information youâ€™ll get.
     The default is 0 (only errors).
     Maximum is 4
 */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();

  // make the pushbutton's pin an input:
  pinMode(pushButton, INPUT);
  // initialize digital pin LED_BUILTIN as an output.
  pinMode(LED_BUILTIN, OUTPUT);
}

void loop() {
  ArduinoCloud.update();

  // read the input pin:
  int buttonState = digitalRead(pushButton);

  // if button is pressed play morse code
  if (buttonState == 1)
  {
    // Morse code: 'b' -...
    dash();
    dot();
    dot(); 
    dot(); 
    delay(300);
  
    // Morse code: 'e' .
    dot(); 
    delay(300);
  
    // Morse code: 'n' -.
    dash();
    dot(); 
    delay(300);

    // Morse code: 'j' .---
    dot();
    dash();
    dash();
    dash(); 
    delay(300);

    // Morse code: 'a' .-
    dot();
    dash(); 
    delay(300);

    // Morse code: 'm' --
    dash();
    dash(); 
    delay(300);

    // Morse code: 'i' ..
    dot();
    dot(); 
    delay(300);

    // Morse code: 'n' -.
    dash();
    dot(); 
    delay(300);
  }
}

